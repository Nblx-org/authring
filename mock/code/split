## core/booking.py
"""
Extremely Important Code: Handles flight reservations.
Written by Alice (senior engineer, domain expert, long tenure).
"""

def book_flight(user_id, flight_id):
    """Handles flight booking logic."""
    # Simulated database interaction
    if flight_id not in FLIGHT_SCHEDULE:
        raise ValueError("Invalid flight ID")
    if FLIGHT_SCHEDULE[flight_id]['seats'] == 0:
        raise ValueError("Flight is full")
    
    FLIGHT_SCHEDULE[flight_id]['seats'] -= 1
    print(f"Flight {flight_id} booked for user {user_id}.")
    return True

FLIGHT_SCHEDULE = {
    "AA123": {"seats": 5},
    "BB456": {"seats": 0}  # Full flight
}

## core/payments.py
"""
Maybe Important Code: Handles refunds.
Written by Alice (senior engineer, but code is new and unproven).
"""

def process_refund(user_id, booking_id):
    """Processes refund for a user."""
    if not _is_valid_booking(booking_id):
        raise ValueError("Invalid booking")
    
    print(f"Refund issued for booking {booking_id}.")
    return True

def _is_valid_booking(booking_id):
    """Simulates checking if a booking exists."""
    return booking_id.startswith("BK_")

## legacy/old_api.py
"""
Unimportant Code: Deprecated API, untouched for years.
Written by Bob (short tenure, non-expert).
"""

def legacy_function():
    print("This function is deprecated and should not be used.")

## contributors.json
{
  "Alice": {
    "tenure": 7,
    "expertise": ["booking", "payments"],
    "commit_history": {
      "core/booking.py": 50,
      "core/payments.py": 5
    }
  },
  "Bob": {
    "tenure": 1,
    "expertise": ["frontend"],
    "commit_history": {
      "legacy/old_api.py": 3
    }
  }
}

## mock_db/flight_data.json
{
  "flights": [
    {"flight_id": "AA123", "status": "on-time", "seats": 5},
    {"flight_id": "BB456", "status": "delayed", "seats": 0}
  ]
}

